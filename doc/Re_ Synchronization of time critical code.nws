Path: uni-berlin.de!fu-berlin.de!logbridge.uoregon.edu!newsfeed.stanford.edu!postnews1.google.com!not-for-mail
From: wmr282@hotmail.com (w m r)
Newsgroups: alt.os.development
Subject: Re: Synchronization of time critical code
Date: 12 Apr 2002 07:06:30 -0700
Organization: http://groups.google.com/
Lines: 59
Message-ID: <398c9ca7.0204120606.62697702@posting.google.com>
References: <a94dhu$c5f$00$1@news.t-online.com>
NNTP-Posting-Host: 65.85.95.151
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 8bit
X-Trace: posting.google.com 1018620390 19909 127.0.0.1 (12 Apr 2002 14:06:30 GMT)
X-Complaints-To: groups-abuse@google.com
NNTP-Posting-Date: 12 Apr 2002 14:06:30 GMT
Xref: uni-berlin.de alt.os.development:23933

What I do is use the 3 'software' bits of the PTE's to hold a state. 
Spinlock  needs to be held only while the state is being modified.

States I have are:

PAGEDOUT, page is set to 'no-access'
READINPROG, page is set to 'no-access'
WRITEINPROG, page is set to 'read-only'
READFAILED, page is set to 'no-access'
WRITEFAILED, page is set to 'read-only'
VALID_CLEAN, page is set to 'read-only'
VALID_DIRTY, page is set to 'read/write'

When I get a pagefault:

1) prevent this thread from being aborted
2) set pagetable's spinlock
3) get page's state,

   PAGEDOUT:
     set to READINPROG
     release spinlock
     allocate physical page
       maybe this swaps something else out
       if so, you're free to do anything as no spinlock is currently
held
     perform paging I/O
     set spinlock
     crash if state is not still READINPROG
     set state to VALID_CLEAN or READFAILED
     release spinlock
     set semaphore in case another thread is waiting for page
     if read failed, signal the error

   READINPROG or WRITEINPROG:
     release spinlock
     wait for semaphore
     repeat back to step 2

   READFAILED or WRITEFAILED:
     release spinlock
     signal the paging error

   VALID_CLEAN:
     if it is a write, change state to VALID_DIRTY
     release spinlock

   VALID_DIRTY:
     release spinlock

4) allow thread to be aborted
5) retry the faulting instruction

Note that the only thread allowed to take a page out of the READINPROG
or WRITEINPROG states is the thread that put it there.  If another
thread sees a page in those states, it waits for that thread to take
it out.

Mike