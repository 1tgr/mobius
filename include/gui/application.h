/* $Id: application.h,v 1.5 2002/12/18 23:54:44 pavlovskii Exp $ */

#ifndef __GUI_APPLICATION_H
#define __GUI_APPLICATION_H

#include <mgl/rc.h>
//#include <os/gui.h>
#include "winmgr.h"
#include <mgl/fontmanager.h>

struct context_t;

namespace os
{
	class GUI_EXPORT RcWinMgr : public mgl::Rc
	{
	protected:
		mgl::BitmapDescriptor m_bitmapDesc;
		mgl::Bitmap m_bitmap;

	public:
		RcWinMgr() : m_bitmap(NULL, m_bitmapDesc), mgl::Rc(&m_bitmap)
		{
			m_bitmap.m_desc.m_width = 800;
			m_bitmap.m_desc.m_height = 600;
		}
	};

    //! Application class
    /*!
     *  \ingroup    gui
     *  Each process requires one application object before any of the GUI 
     *  classes can be used. Usually, an instance of \p os::Application is 
     *  constructed in \p main , from where the message loop runs.
     */
    class GUI_EXPORT Application
    {
    protected:
        static Application *g_theApp;

    public:
        //! MGL rendering context used by the application
        //mglrc_t *m_rc;
        RcWinMgr m_rc;

        //! Retrieves a pointer to the process's application object
        static Application *GetApplication();

        mgl::FontManager m_fontManager;

        //! Application constructor
        /*!
         *  \param  name    Application name in MIME format: 
         *      \p application/x-vnd.string , where \p string is a unique
         *      application identifier.
         */
        Application(const wchar_t *name);
        //! Application destructor
        virtual ~Application();

        //! Runs the central message loop for the thread
        /*!
         *  \return The thread's exit code
         */
        int Run();

        //! Waits for and obtains a message from the thread's message queue
        ipc_message_t *GetMessage(void);

        //! Handles a message obtained from \p GetMessage
        void HandleMessage(ipc_message_t *msg);

        //! Handler for exceptions generated by the kernel
        static void ExceptionHandler();

        //! Handles an exception from ExceptionHandler
        bool HandleException(context_t *ctx);
    };
};

#endif